import XMonad
import XMonad.Hooks.DynamicLog
import XMonad.Layout.Groups.Wmii
import XMonad.Layout.Accordion
import XMonad.Layout.Tabbed
import XMonad.Layout.StackTile
import XMonad.Layout.ResizableTile
import XMonad.Hooks.ManageHelpers
import XMonad.Layout.IndependentScreens
import qualified XMonad.StackSet as W
import XMonad.Util.EZConfig (additionalKeys)

conf = defaultConfig {
	workspaces= myWorkspaces,
	modMask = mod4Mask,
	focusFollowsMouse = False,
	terminal = "st",
	layoutHook = mylayout,
	 manageHook = mymanagehook,
	 borderWidth = 0 }
 `additionalKeys` myKeys

mymanagehook = composeAll [
    isFullscreen --> doFullFloat,
    className =? "Vlc" --> doFloat,
    manageHook defaultConfig
    ]
myKeys =
         [
         -- workspaces are distinct by screen
         ((m .|. mod4Mask, k), windows $ onCurrentScreen f i)
               | (i, k) <- zip (workspaces' conf) [xK_1 .. xK_9]
               , (f, m) <- [(W.view, 0), (W.shift, shiftMask)
               ]

         ]
         ++
         [
           ((mod4Mask, xK_j ), windows W.focusUp) -- %! Move focus to the next window 
         , ((mod4Mask, xK_k ), windows W.focusDown ) -- %! Move focus to the previous window
               ]
         ++
         [((m .|. mod4Mask, key), screenWorkspace sc >>= flip whenJust (windows . f))
                 | (key, sc) <- zip [xK_e, xK_w, xK_r] [0..]
                 , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]


myWorkspaces = withScreens 2 ["gen","wrk","med","dev","net","var","7","of","9"]
mylayout = ResizableTall 1 (3/100) (1/2) [] ||| Full ||| StackTile 1 (3/100) (1/3) ||| wmii shrinkText defaultTheme ||| Accordion ||| tabbed shrinkText defaultTheme
main = xmonad conf

